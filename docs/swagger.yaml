basePath: /api
definitions:
  dto.AuthResponse:
    properties:
      id:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.AuthSignInRequest:
    properties:
      email:
        maxLength: 200
        minLength: 1
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.AuthSignUpRequest:
    properties:
      confirm_password:
        type: string
      email:
        maxLength: 200
        minLength: 1
        type: string
      name:
        maxLength: 8
        minLength: 1
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - confirm_password
    - email
    - name
    - password
    type: object
  dto.UserRequest:
    properties:
      email:
        maxLength: 200
        minLength: 1
        type: string
      password:
        maxLength: 8
        minLength: 1
        type: string
    required:
    - email
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
    type: object
  dto.WebResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
  description: A modern, production-ready Go boilerplate for building scalable web
    APIs and microservices. This project includes best practices for clean architecture,
    modularity, testing, and observability.
  title: Go Boilerplate API
  version: "1.0"
paths:
  /signin:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token with user info
      operationId: auth-signin
      parameters:
      - description: SignIn request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully signed in user
          schema:
            allOf:
            - $ref: '#/definitions/dto.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Invalid request payload or failed to sign in
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Sign in an existing user
      tags:
      - Auth
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password, returning token and
        user info
      operationId: auth-signup
      parameters:
      - description: SignUp request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthSignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully signed up user
          schema:
            allOf:
            - $ref: '#/definitions/dto.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Invalid request payload or failed to sign up
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Sign up a new user
      tags:
      - Auth
  /user:
    get:
      description: Retrieves a list of all users.
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all users
          schema:
            allOf:
            - $ref: '#/definitions/dto.WebResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided email and returns the created
        user's details.
      operationId: create-user
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            allOf:
            - $ref: '#/definitions/dto.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid request payload or failed to create user
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /user/{userId}:
    delete:
      description: Deletes a user by their ID.
      operationId: delete-user
      parameters:
      - description: User ID (UUID)
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Invalid user ID or user not found
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieves a single user's details by their ID.
      operationId: get-user-by-id
      parameters:
      - description: User ID (UUID)
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            allOf:
            - $ref: '#/definitions/dto.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid user ID format or user not found
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "404":
          description: User not found (due to invalid UUID format)
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates an existing user's details by their ID.
      operationId: update-user
      parameters:
      - description: User ID (UUID)
        in: path
        name: userId
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            allOf:
            - $ref: '#/definitions/dto.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid request payload, invalid user ID, or user not found
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.WebResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-KEY
    type: apiKey
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
