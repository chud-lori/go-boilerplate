package mocks

import (
	"context"

	"github.com/chud-lori/go-boilerplate/domain/entities"
	"github.com/chud-lori/go-boilerplate/domain/ports"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

// Save provides a mock function with given fields: ctx, tx, post
func (_m *MockPostRepository) Save(ctx context.Context, tx ports.Transaction, post *entities.Post) (*entities.Post, error) {
	args := _m.Called(ctx, tx, post)
	var r0 *entities.Post
	if args.Get(0) != nil {
		r0 = args.Get(0).(*entities.Post)
	}
	r1 := args.Error(1)
	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, post
func (_m *MockPostRepository) Update(ctx context.Context, tx ports.Transaction, post *entities.Post) (*entities.Post, error) {
	args := _m.Called(ctx, tx, post)
	var r0 *entities.Post
	if args.Get(0) != nil {
		r0 = args.Get(0).(*entities.Post)
	}
	r1 := args.Error(1)
	return r0, r1
}

// Delete provides a mock function with given fields: ctx, tx, id
func (_m *MockPostRepository) Delete(ctx context.Context, tx ports.Transaction, id uuid.UUID) error {
	args := _m.Called(ctx, tx, id)
	r0 := args.Error(0)
	return r0
}

// GetById provides a mock function with given fields: ctx, tx, id
func (_m *MockPostRepository) GetById(ctx context.Context, tx ports.Transaction, id uuid.UUID) (*entities.Post, error) {
	args := _m.Called(ctx, tx, id)
	var r0 *entities.Post
	if args.Get(0) != nil {
		r0 = args.Get(0).(*entities.Post)
	}
	r1 := args.Error(1)
	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, tx, search, pagination
func (_m *MockPostRepository) GetAll(ctx context.Context, tx ports.Transaction, search string, pagination entities.PaginationParams) ([]entities.Post, error) {
	args := _m.Called(ctx, tx, search, pagination)
	var r0 []entities.Post
	if args.Get(0) != nil {
		r0 = args.Get(0).([]entities.Post) // Note: Slice of structs, not pointers
	}
	r1 := args.Error(1)
	return r0, r1
}

// CountPost provides a mock function with given fields: ctx, tx
func (_m *MockPostRepository) CountPost(ctx context.Context, tx ports.Transaction) (uint32, error) {
	args := _m.Called(ctx, tx)
	var r0 uint32
	if args.Get(0) != nil {
		r0 = args.Get(0).(uint32)
	}
	r1 := args.Error(1)
	return r0, r1
}
