package mocks

import (
	"context"

	"github.com/chud-lori/go-boilerplate/domain/entities"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockPostService is an autogenerated mock type for the PostService type
type MockPostService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, post
func (_m *MockPostService) Create(ctx context.Context, post *entities.Post) (*entities.Post, error) {
	args := _m.Called(ctx, post)
	if result := args.Get(0); result != nil {
		return result.(*entities.Post), args.Error(1)
	}
	return nil, args.Error(1)
}

// Update provides a mock function with given fields: ctx, post
func (_m *MockPostService) Update(ctx context.Context, post *entities.Post) (*entities.Post, error) {
	args := _m.Called(ctx, post)
	if result := args.Get(0); result != nil {
		return result.(*entities.Post), args.Error(1)
	}
	return nil, args.Error(1)
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockPostService) Delete(ctx context.Context, id uuid.UUID) error {
	args := _m.Called(ctx, id)
	return args.Error(0)
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockPostService) GetById(ctx context.Context, id uuid.UUID) (*entities.Post, error) {
	args := _m.Called(ctx, id)
	if result := args.Get(0); result != nil {
		return result.(*entities.Post), args.Error(1)
	}
	return nil, args.Error(1)
}

// GetAll provides a mock function with given fields: ctx, search, page, limit
func (_m *MockPostService) GetAll(ctx context.Context, search string, page int, limit int) ([]entities.Post, error) {
	args := _m.Called(ctx, search, page, limit)
	if result := args.Get(0); result != nil {
		// Note: GetAll returns []entities.Post, not []*entities.Post
		return args.Get(0).([]entities.Post), args.Error(1)
	}
	return nil, args.Error(1)
}
