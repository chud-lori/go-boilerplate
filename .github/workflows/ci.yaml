name: Go Boilerplate CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Build and Test Go Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x' # Using 'x' for latest patch, or specify exact '1.22.5'
          cache: true # Enable caching for Go modules and build cache

      - name: Download Go modules
        # This step will download all dependencies listed in go.mod and cache them.
        # If the go.sum hasn't changed, this will be very fast due to setup-go's caching.
        run: go mod download

      - name: Verify Go module integrity (optional but recommended)
        # Ensures that go.sum matches the downloaded modules.
        # Helps catch issues like corrupted caches or unexpected changes.
        run: go mod verify

      - name: Build Go application
        # This step compiles your main package. If your project has multiple
        # main packages, you might need to adjust this (e.g., `go build ./cmd/my-app`).
        # This ensures the code compiles successfully before running tests.
        run: go build -v ./...

      - name: Run Go tests
        # Runs all tests in the project. If `go build` passed, this focuses on test logic.
        run: go test ./... -v -coverprofile=coverage.out -race # -race is highly recommended for concurrency issues

      - name: Upload test coverage report (optional)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
