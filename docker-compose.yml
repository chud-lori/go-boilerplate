networks:
  service-network:
    driver: bridge

services:
  service-postgres:
    container_name: service-postgres
    image: postgres:latest
    labels:
      logging: "service-promtail"
      logging_jobname: "postgres-log"
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: ${PSQL_USER}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5433:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5

  service-redis:
    container_name: service-redis
    image: redis:latest
    labels:
      logging: "service-promtail"
      logging_jobname: "redis-log"
    env_file:
      - .env.docker
    ports:
      - 6389:6379
    networks:
      - service-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  migrate:
    image: migrate/migrate
    container_name: service-migrate
    env_file:
      - .env.docker
    depends_on:
      service-postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    entrypoint: >
      /bin/sh -c "
        echo '⏳ Running migrations...' &&
        migrate -path=/migrations -database=\"$${DATABASE_URL}\" up &&
        echo '✅ Migrations completed.'
      "
    restart: "no"
    networks:
      - service-network

  service-grpc:
    container_name: service-grpc
    build: .
    labels:
      logging: "service-promtail"
      logging_jobname: "service-grpc-log"
    env_file:
      - .env.docker
    ports:
      - 50051:50051
    # no need database for grpc server for now
    # depends_on:
      # service-postgres:
      #   condition: service_healthy
      # service-redis:
      #   condition: service_healthy
      # migrate:
      #   condition: service_completed_successfully
    networks:
      - service-network
    command: ["./grpc-server"]
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 50051 || exit 1"] # Checks if port 50051 is open
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  service-app:
    container_name: service-app
    build: .
    labels:
      logging: "service-promtail"
      logging_jobname: "service-app-log"
    env_file:
      - .env.docker
    ports:
      - 1234:1234
      - 8080:8080
    depends_on:
      service-postgres:
        condition: service_healthy
      service-redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      service-grpc:
        condition: service_healthy
    networks:
      - service-network
    command: ["./api-service"]

  service-grafana:
    container_name: service-grafana
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    networks:
      - service-network

  service-loki:
    container_name: service-loki
    image: grafana/loki:3.2.1
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - service-network

  service-promtail:
    image: grafana/promtail:3.2.1
    container_name: service-promtail
    volumes:
      - ./promtail.yml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - service-loki
    networks:
      - service-network

  service-rabbitmq:
    image: rabbitmq:3.12-management-alpine
    labels:
      logging: "service-promtail"
      logging_jobname: "rabbitmq-log"
    container_name: service-rabbitmq
    ports:
      - 5672:5672 # AMQP
      - 15672:15672 # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - service-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  upload-consumer:
    build:
      context: .
    labels:
      logging: "service-promtail"
      logging_jobname: "upload-consumer-log"
    container_name: service-upload-consumer
    command: ["./upload-consumer"]
    env_file:
      - .env.docker
    depends_on:
      service-rabbitmq:
        condition: service_healthy
      service-redis:
        condition: service_healthy
    networks:
      - service-network

volumes:
  postgres_data:
